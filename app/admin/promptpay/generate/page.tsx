'use client';

import { useState, useEffect } from 'react';
import QRCode from 'qrcode.react';

export default function PromptPayQRGeneratorPage() {
  const [token, setToken] = useState('');
  const [services, setServices] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [generating, setGenerating] = useState(false);
  const [selectedService, setSelectedService] = useState('');
  const [customAmount, setCustomAmount] = useState('');
  const [qrCodeData, setQrCodeData] = useState('');
  const [qrImageUrl, setQrImageUrl] = useState('');

  // Get token from URL
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const tokenParam = urlParams.get('token') || '';
    setToken(tokenParam);
  }, []);

  // Load services
  useEffect(() => {
    if (!token) return;

    const loadServices = async () => {
      setLoading(true);
      try {
        const res = await fetch('/api/services/list');
        if (res.ok) {
          const data = await res.json();
          setServices(data);
        } else {
          console.error('Failed to load services');
        }
      } catch (err) {
        console.error('Error loading services:', err);
      } finally {
        setLoading(false);
      }
    };

    loadServices();
  }, [token]);

  const generateQR = async () => {
    if (!token) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Admin token');
      return;
    }

    if (!selectedService && !customAmount) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô');
      return;
    }

    setGenerating(true);
    setQrCodeData('');
    setQrImageUrl('');

    try {
      const res = await fetch('/api/promptpay/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-admin-token': token
        },
        body: JSON.stringify({
          service_id: selectedService || null,
          amount: customAmount ? parseFloat(customAmount) : null
        })
      });

      if (res.ok) {
        const data = await res.json();
        setQrCodeData(data.qr_code_data);
        setQrImageUrl(data.qr_image_url);
      } else {
        const error = await res.json();
        alert(`Error: ${error.error || 'Failed to generate QR code'}`);
      }
    } catch (error) {
      console.error('Error generating QR code:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á QR code');
    } finally {
      setGenerating(false);
    }
  };

  const downloadQR = () => {
    if (!qrImageUrl) return;
    
    const link = document.createElement('a');
    link.href = qrImageUrl;
    link.download = `promptpay-qr-${Date.now()}.png`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  if (!token) {
    return (
      <div className="max-w-2xl mx-auto p-4">
        <div className="bg-white rounded-2xl shadow-sm p-6 text-center border border-gray-100">
          <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <span className="text-2xl text-red-500">‚ö†Ô∏è</span>
          </div>
          <h1 className="text-xl font-bold text-gray-800 mb-2">‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô</h1>
          <p className="text-gray-600 mb-4">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Admin token ‡πÉ‡∏ô URL</p>
          <p className="text-sm text-gray-500 bg-gray-50 p-3 rounded-lg">
            ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: /admin/promptpay/generate?token=YOUR_ADMIN_TOKEN
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto space-y-6 p-4">
      {/* Header */}
      <div>
        <h1 className="text-xl md:text-2xl font-bold text-gray-800">‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code PromptPay</h1>
        <p className="text-gray-600 mt-1 text-sm md:text-base">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î QR code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô PromptPay</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Form Section */}
        <div className="bg-white rounded-2xl shadow-sm p-5 border border-gray-100">
          <h2 className="text-lg font-bold text-gray-800 mb-4">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h2>
          
          <div className="space-y-5">
            {/* Service Selection */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
              </label>
              {loading ? (
                <div className="flex justify-center py-3">
                  <div className="w-6 h-6 border-4 border-indigo-500 border-t-transparent rounded-full animate-spin"></div>
                </div>
              ) : (
                <select
                  className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 text-sm"
                  value={selectedService}
                  onChange={(e) => setSelectedService(e.target.value)}
                >
                  <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)</option>
                  {services.map(service => (
                    <option key={service.id} value={service.id}>
                      {service.name} - ‡∏ø{service.price.toLocaleString()} (‡∏°‡∏±‡∏î‡∏à‡∏≥ ‡∏ø{service.deposit.toLocaleString()})
                    </option>
                  ))}
                </select>
              )}
            </div>
            
            {/* Divider */}
            <div className="relative flex items-center">
              <div className="flex-grow border-t border-gray-200"></div>
              <span className="mx-4 text-gray-500 text-sm">‡∏´‡∏£‡∏∑‡∏≠</span>
              <div className="flex-grow border-t border-gray-200"></div>
            </div>
            
            {/* Custom Amount */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                ‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏≠‡∏á
              </label>
              <div className="relative">
                <span className="absolute left-3 top-3 text-gray-500">‡∏ø</span>
                <input
                  type="number"
                  step="0.01"
                  className="w-full pl-8 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 text-sm"
                  placeholder="0.00"
                  value={customAmount}
                  onChange={(e) => setCustomAmount(e.target.value)}
                />
              </div>
              <p className="mt-1 text-xs text-gray-500">‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
            </div>
            
            {/* Info Box */}
            <div className="bg-blue-50 border border-blue-100 rounded-xl p-4">
              <div className="flex items-start">
                <span className="text-blue-500 text-lg mr-3">‚ÑπÔ∏è</span>
                <div>
                  <h3 className="font-medium text-blue-800 mb-2">‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</h3>
                  <ul className="text-sm text-blue-700 space-y-1">
                    <li className="flex items-start">
                      <span className="mr-2">‚Ä¢</span>
                      <span>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ</span>
                    </li>
                    <li className="flex items-start">
                      <span className="mr-2">‚Ä¢</span>
                      <span>‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á</span>
                    </li>
                    <li className="flex items-start">
                      <span className="mr-2">‚Ä¢</span>
                      <span>‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á QR code ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</span>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
            
            {/* Generate Button */}
            <button
              className={`w-full py-3 px-4 rounded-lg font-medium text-white flex items-center justify-center ${
                generating 
                  ? 'bg-gray-400 cursor-not-allowed' 
                  : 'bg-indigo-600 hover:bg-indigo-700'
              }`}
              onClick={generateQR}
              disabled={generating}
            >
              {generating ? (
                <>
                  <span className="mr-2">
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  </span>
                  <span className="text-sm">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code...</span>
                </>
              ) : (
                <>
                  <span className="mr-2 text-lg">üßæ</span>
                  <span className="text-sm">‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code</span>
                </>
              )}
            </button>
          </div>
        </div>
        
        {/* QR Code Display */}
        <div className="bg-white rounded-2xl shadow-sm p-5 border border-gray-100">
          <h2 className="text-lg font-bold text-gray-800 mb-4">QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h2>
          
          {qrCodeData ? (
            <div className="text-center">
              <div className="p-4 bg-white border-2 border-gray-200 rounded-xl inline-block">
                {qrImageUrl ? (
                  <img 
                    src={qrImageUrl} 
                    alt="PromptPay QR Code" 
                    className="w-64 h-64"
                  />
                ) : (
                  <QRCode 
                    value={qrCodeData} 
                    size={256} 
                    level="H" 
                    includeMargin={true}
                    imageSettings={{
                      src: "https://upload.wikimedia.org/wikipedia/commons/4/41/PromptPay_Logo.svg",
                      height: 40,
                      width: 40,
                      excavate: true,
                    }}
                  />
                )}
              </div>
              
              <div className="mt-4">
                {selectedService && (
                  <p className="font-medium text-gray-800">
                    ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: {services.find(s => s.id === selectedService)?.name || '-'}
                  </p>
                )}
                <p className="font-medium text-lg text-green-600 mt-1">
                  ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: ‡∏ø{(customAmount ? parseFloat(customAmount) : services.find(s => s.id === selectedService)?.deposit || 0).toFixed(2)}
                </p>
              </div>
              
              <div className="mt-4 flex flex-col sm:flex-row gap-3">
                <button
                  className="flex-1 py-2 px-4 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 text-sm font-medium"
                  onClick={downloadQR}
                >
                  ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î QR Code
                </button>
                <button
                  className="flex-1 py-2 px-4 bg-white border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 text-sm font-medium"
                  onClick={() => window.print()}
                >
                  ‡∏û‡∏¥‡∏°‡∏û‡πå QR Code
                </button>
              </div>
            </div>
          ) : (
            <div className="flex items-center justify-center h-64 bg-gray-50 rounded-xl">
              <div className="text-center text-gray-500">
                <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-3">
                  <span className="text-2xl">üßæ</span>
                </div>
                <p className="text-sm">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code</p>
                <p className="text-xs mt-1">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢</p>
              </div>
            </div>
          )}
          
          <div className="mt-5 bg-green-50 border border-green-100 rounded-xl p-4">
            <div className="flex items-start">
              <span className="text-green-500 text-lg mr-3">‚úÖ</span>
              <div>
                <h3 className="font-medium text-green-800 mb-2">‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h3>
                <ol className="text-sm text-green-700 list-decimal pl-5 space-y-1">
                  <li>‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö PromptPay</li>
                  <li>‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô</li>
                  <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</li>
                  <li>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</li>
                </ol>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}